package com.frame.config;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.Properties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author liuzhengyi
 * @date 2014年12月4日 下午4:02:30
 */
public class SystemConfig {

	Logger logger = LoggerFactory.getLogger(SystemConfig.class);

	private Properties properties = new Properties();
	public String redisIP;
	public int redisPort;
	public int serverPort;
	public int serverId;

	/**
	 * @return the redisIP
	 */
	public String getRedisIP() {
		return redisIP;
	}

	/**
	 * @param redisIP
	 *            the redisIP to set
	 */
	public void setRedisIP(String redisIP) {
		this.redisIP = redisIP;
	}

	/**
	 * @return the redisPort
	 */
	public int getRedisPort() {
		return redisPort;
	}

	/**
	 * @param redisPort
	 *            the redisPort to set
	 */
	public void setRedisPort(int redisPort) {
		this.redisPort = redisPort;
	}

	/**
	 * @return the serverPort
	 */
	public int getServerPort() {
		return serverPort;
	}

	/**
	 * @param serverPort
	 *            the serverPort to set
	 */
	public void setServerPort(int serverPort) {
		this.serverPort = serverPort;
	}

	/**
	 * @return the serverId
	 */
	public int getServerId() {
		return serverId;
	}

	/**
	 * @param serverId
	 *            the serverId to set
	 */
	public void setServerId(int serverId) {
		this.serverId = serverId;
	}

	public SystemConfig() {
		try {
			initSystemConfig();
		} catch (Exception e) {
			logger.error(e.getMessage());
		}
	}

	/**
	 * @author liuzhengyi
	 * @throws IOException
	 * @throws FileNotFoundException
	 * @date 2014年12月4日 下午4:08:46
	 */
	private void initSystemConfig() throws Exception {
		properties.load(new FileInputStream(new File(this.getClass()
				.getClassLoader().getResource("sys.properties").getPath())));
		Method[] methods = getClass().getMethods();
		for (Method method : methods) {
			try {
				String name = method.getName();
				if (name.startsWith("set")) {
					Class<?> parameterType = method.getParameterTypes()[0];
					String parameterName = name.substring(3, name.length())
							.toLowerCase();
					if (!checkKey(parameterName)) {
						continue;
					}
					if (isInt(parameterType)) {
						method.invoke(this, Integer.valueOf(properties
								.getProperty(parameterName)));
					} else if (isBoolean(parameterType)) {
						method.invoke(this, Boolean.valueOf(properties
								.getProperty(parameterName)));
					} else if (isDouble(parameterType)) {
						method.invoke(this, Double.valueOf(properties
								.getProperty(parameterName)));
					} else if (isFloat(parameterType)) {
						method.invoke(this, Float.valueOf(properties
								.getProperty(parameterName)));
					} else if (isLong(parameterType)) {
						method.invoke(this, Long.valueOf(properties
								.getProperty(parameterName)));
					} else if (isShort(parameterType)) {
						method.invoke(this, Short.valueOf(properties
								.getProperty(parameterName)));
					} else {
						method.invoke(this,
								properties.getProperty(parameterName));
					}
				}
			} catch (Exception e) {
				logger.error(e.getMessage());
				e.printStackTrace();
			}
		}

	}

	private boolean checkKey(String key) {
		return properties.containsKey(key);
	}

	private boolean isInt(Class<?> c) {
		return c == Integer.TYPE || c == Integer.class;
	}

	private boolean isShort(Class<?> c) {
		return c == Short.TYPE || c == Short.class;
	}

	private boolean isLong(Class<?> c) {
		return c == Long.TYPE || c == Long.class;
	}

	private boolean isDouble(Class<?> c) {
		return c == Double.TYPE || c == Double.class;
	}

	private boolean isFloat(Class<?> c) {
		return c == Float.TYPE || c == Float.class;
	}

	private boolean isBoolean(Class<?> c) {
		return c == Boolean.TYPE || c == Boolean.class;
	}

}
